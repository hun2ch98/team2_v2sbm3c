<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dev.mvc.grade.GradeDAOInter">

  <!-- 등급 글 추가 -->
  <insert id="create" parameterType="dev.mvc.grade.GradeVO">
    INSERT INTO grade (gradeno, grade_name, evo_criteria, evolution, file1, file1saved, thumb1, size1, rdate)
    VALUES (grade_seq.nextval, #{grade_name}, #{evo_criteria}, #{evolution}, #{file1}, #{file1saved}, #{thumb1}, #{size1}, sysdate)
  </insert>
  
  <!-- 등급 조회 -->
  <select id="read" parameterType="dev.mvc.grade.GradeVO">
    SELECT gradeno, grade_name, evo_criteria, rdate, evolution, file1, file1saved, thumb1, size1
    FROM grade
    WHERE gradeno = #{gradeno}
  </select>
  
  <!-- 모든 목록 -->
  <select id="list_all" parameterType="dev.mvc.grade.GradeVO">
    SELECT gradeno, grade_name, evo_criteria, rdate, evolution, file1, file1saved, thumb1, size1
    FROM grade
    ORDER BY gradeno DESC
  </select>
  
  <!-- 등록된 목록 -->
  <select id="list_by_gradeno" resultType="dev.mvc.grade.GradeVO" parameterType="int">
    SELECT gradeno, grade_name, evo_criteria, rdate, evolution, file1, file1saved, thumb1, size1
    FROM grade
    WHERE gradeno = #{gradeno}
    ORDER BY gradeno DESC
  </select>
  
  <!-- 내용 수정 -->
  <update id="update_text" parameterType="dev.mvc.grade.GradeVO">
    UPDATE grade
    SET grade_name=#{grade_name}, evo_criteria=#{evo_criteria}, evolution=#{evolution}
    WHERE gradeno = #{gradeno}
  </update>
  
  <!-- 파일 수정 -->
  <update id="update_file" parameterType="dev.mvc.grade.GradeVO">
    UPDATE grade
    SET file1=#{file1}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}
    WHERE gradeno = #{gradeno}
  </update>
  
  <!-- 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM grade
    WHERE gradeno = #{gradeno}
  </delete>
  
  <!-- 검색 목록 -->
  <select id="list_by_gradeno_search" resultType="dev.mvc.grade.GradeVO" parameterType="HashMap">
      SELECT gradeno, grade_name, evo_criteria, rdate, evolution, LOWER(file1) AS file1, file1saved, thumb1, size1
      FROM grade
      WHERE (#{grade_name} IS NULL OR #{grade_name} = '' OR LOWER(grade_name) LIKE LOWER('%' || #{grade_name} || '%'))
      ORDER BY gradeno DESC
      OFFSET #{startRow} ROWS FETCH NEXT #{pageSize} ROWS ONLY
  </select>
  
  <!-- 검색 레코드 갯수 -->
  <select id="count_by_gradeno_search" resultType="int" parameterType="HashMap">
      SELECT COUNT(*)
      FROM grade
      WHERE (#{grade_name} IS NULL OR #{grade_name} = '' OR LOWER(grade_name) LIKE LOWER('%' || #{grade_name} || '%'))
  </select>
  
  <!-- 등급별 검색 + 페이징 목록 -->
  <select id="list_by_gradeno_search_paging" resultType="dev.mvc.grade.GradeVO" parameterType="HashMap">
      SELECT *
      FROM (
          SELECT gradeno, grade_name, evo_criteria, rdate, evolution, LOWER(file1) AS file1, file1saved, thumb1, size1,
                 ROW_NUMBER() OVER (ORDER BY gradeno DESC) AS rnum
          FROM grade
          WHERE (#{grade_name} IS NULL OR #{grade_name} = '' OR LOWER(grade_name) LIKE LOWER('%' || #{grade_name} || '%'))
      )
      WHERE rnum BETWEEN #{startRow} AND #{endRow}
  </select>



</mapper>
