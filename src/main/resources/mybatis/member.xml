<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- SB가 자동으로 구현하여 연동하는 interface -->
<mapper namespace="dev.mvc.member.MemberDAOInter"> <!-- SB가 자동으로 구현하여 연동하는 interface -->

  <!-- ID 중복 검사 -->
  <select id="checkID" resultType="int" parameterType="String">
    SELECT COUNT(id) as cnt
    FROM member
    WHERE id = #{id}
  </select>
  
  <!-- 회원 등록 -->
  <insert id="create" parameterType="dev.mvc.member.MemberVO">
    INSERT INTO member(memberno, gradeno, id, passwd, email, name, nickname, birth, zipcode, address1, address2, pf_img, file1saved, thumb1, size1, mdate, grade)
    VALUES (member_seq.nextval, #{gradeno}, #{id}, #{passwd}, #{email}, #{name}, #{nickname}, #{birth}, #{zipcode}, #{address1}, #{address2}, #{pf_img}, #{file1saved}, #{thumb1}, #{size1}, sysdate, #{grade})
  </insert>
  
  <!-- 회원 목록 -->
  <select id="list_all" resultType="dev.mvc.member.MemberVO">
    SELECT memberno, gradeno, id, passwd, email, name, nickname, birth, zipcode, address1, address2, pf_img, file1saved, thumb1, size1, mdate, grade
    FROM member
    ORDER BY grade ASC, id ASC
  </select>
  
  <!-- memberno로 회원 정보 조회 -->
  <select id="read" resultType="dev.mvc.member.MemberVO" parameterType="int">
    SELECT memberno, gradeno, id, passwd, email, name, nickname, birth, zipcode, address1, address2, pf_img, file1saved, thumb1, size1, mdate, grade
    FROM member
    WHERE memberno = #{memberno}
  </select>
  
  <!-- greadno로 회원 정보 조회 
  <select id="read" resultType="dev.mvc.member.MemberVO" parameterType="int">
    SELECT memberno, gradeno, id, passwd, email, name, nickname, birth, zipcode, address1, address2, pf_img, file1saved, thumb1, size1, mdate, grade
    FROM member
    WHERE gradeno = #{gradeno}
  </select>-->

  <!-- id로 회원 정보 조회 -->
  <select id="readById" resultType="dev.mvc.member.MemberVO" parameterType="String">
    SELECT memberno, id, passwd, email, name, nickname, birth, zipcode, address1, address2, pf_img, file1saved, thumb1, size1, mdate, grade
    FROM member
    WHERE id = #{id}
  </select>
  
  <!-- 회원 정보 수정 -->
  <update id="update" parameterType="dev.mvc.member.MemberVO">
    UPDATE member 
    SET name=#{name}, email=#{email}, nickname=#{nickname}, zipcode=#{zipcode}, address1=#{address1}, address2=#{address2}, pf_img=#{pf_img}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}, passwd=#{passwd}
    WHERE memberno=#{memberno}
  </update>
  
  <!-- 회원 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM member
    WHERE memberno=#{memberno}
  </delete>

  <!-- 로그인 처리 (1: 성공, 0: 실패) -->
  <select id="login" resultType="int" parameterType="HashMap">
    SELECT COUNT(memberno) as cnt
    FROM member
    WHERE id=#{id} AND passwd=#{passwd}
  </select>
  
  <!-- 현재 패스워드 검사 -->
  <select id="passwd_check" parameterType="HashMap" resultType="int">
    SELECT COUNT(memberno) as cnt
    FROM member
    WHERE memberno=#{memberno} AND passwd=#{passwd}
  </select>
   
  <!-- 패스워드 변경 -->
  <update id="passwd_update" parameterType="HashMap">
    UPDATE member
    SET passwd=#{passwd}
    WHERE memberno=#{memberno}
  </update>
  
  <!-- 회원 목록을 검색어로 페이징 처리하여 반환 -->
  <select id="list_by_memberno_search_paging" parameterType="hashmap" resultType="dev.mvc.member.MemberVO">
      SELECT *
      FROM (
          SELECT memberno, id, passwd, email, name, nickname, birth, zipcode, address1, address2, pf_img, file1saved, thumb1, size1, mdate, grade,
                 ROW_NUMBER() OVER (ORDER BY memberno DESC) AS rnum
          FROM member
          WHERE name LIKE '%' || #{word} || '%'
      )
      WHERE rnum BETWEEN #{start_num} AND #{end_num}
  </select>
  
  <!-- 회원번호별 검색된 레코드 갯수 -->
  <select id="list_by_memberno_search_count" parameterType="hashmap" resultType="int">
      SELECT COUNT(*)
      FROM member
      WHERE name LIKE '%' || #{word} || '%'
  </select>
  
</mapper>
